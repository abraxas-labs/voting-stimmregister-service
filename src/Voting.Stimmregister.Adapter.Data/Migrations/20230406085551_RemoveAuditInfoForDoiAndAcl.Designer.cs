// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Voting.Stimmregister.Adapter.Data;

#nullable disable

namespace Voting.Stimmregister.Adapter.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230406085551_RemoveAuditInfoForDoiAndAcl")]
    partial class RemoveAuditInfoForDoiAndAcl
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.AccessControlListDoiEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bfs")
                        .HasColumnType("text");

                    b.Property<string>("Canton")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ImportStatisticId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TenantName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ValidationErrors")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ImportStatisticId");

                    b.HasIndex("ParentId");

                    b.ToTable("AccessControlListDois");
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.DomainOfInfluenceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CatholicChurchCircleId")
                        .HasColumnType("text");

                    b.Property<string>("CatholicChurchCircleName")
                        .HasColumnType("text");

                    b.Property<int>("DomainOfInfluenceId")
                        .HasColumnType("integer");

                    b.Property<string>("EvangelicChurchCircleId")
                        .HasColumnType("text");

                    b.Property<string>("EvangelicChurchCircleName")
                        .HasColumnType("text");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HouseNumberAddition")
                        .HasColumnType("text");

                    b.Property<Guid?>("ImportStatisticId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsPartOfPoliticalMunicipality")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("integer");

                    b.Property<string>("PeopleCouncilCircleId")
                        .HasColumnType("text");

                    b.Property<string>("PeopleCouncilCircleName")
                        .HasColumnType("text");

                    b.Property<string>("PoliticalCircleId")
                        .HasColumnType("text");

                    b.Property<string>("PoliticalCircleName")
                        .HasColumnType("text");

                    b.Property<string>("ResidentialDistrictCircleId")
                        .HasColumnType("text");

                    b.Property<string>("ResidentialDistrictCircleName")
                        .HasColumnType("text");

                    b.Property<string>("SchoolCircleId")
                        .HasColumnType("text");

                    b.Property<string>("SchoolCircleName")
                        .HasColumnType("text");

                    b.Property<byte[]>("SignatureHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("SignatureKeyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("SignatureVersion")
                        .HasColumnType("smallint");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SwissZipCode")
                        .HasColumnType("integer");

                    b.Property<string>("Town")
                        .HasColumnType("text");

                    b.Property<string>("TrafficCircleId")
                        .HasColumnType("text");

                    b.Property<string>("TrafficCircleName")
                        .HasColumnType("text");

                    b.Property<string>("ValidationErrors")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ImportStatisticId");

                    b.ToTable("DomainOfInfluences");
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.EVoterAuditEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<short?>("BfsCanton")
                        .HasColumnType("smallint");

                    b.Property<short?>("BfsMunicipality")
                        .HasColumnType("smallint");

                    b.Property<string>("ContextId")
                        .HasColumnType("text");

                    b.Property<bool?>("EVoterFlag")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EVoterId")
                        .HasColumnType("uuid");

                    b.Property<short?>("StatusCode")
                        .HasColumnType("smallint");

                    b.Property<string>("StatusMessage")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EVoterAudits");
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.EVoterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Ahvn13")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("BfsCanton")
                        .HasColumnType("smallint");

                    b.Property<short?>("BfsMunicipality")
                        .HasColumnType("smallint");

                    b.Property<string>("ContextId")
                        .HasColumnType("text");

                    b.Property<bool?>("EVoterFlag")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("EVoters");
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.FilterCriteriaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FilterId")
                        .HasColumnType("uuid");

                    b.Property<string>("FilterOperator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilterType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilterValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("FilterVersionId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FilterId");

                    b.HasIndex("FilterVersionId");

                    b.ToTable("FilterCriteria");
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.FilterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.FilterVersionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FilterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("SignatureHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("SignatureKeyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("SignatureVersion")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("FilterId");

                    b.ToTable("FilterVersions");
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.FilterVersionPersonEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FilterVersionId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FilterVersionId");

                    b.HasIndex("PersonId");

                    b.ToTable("FilterVersionPersons");
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.ImportStatisticEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DatasetsCountCreated")
                        .HasColumnType("integer");

                    b.Property<int>("DatasetsCountDeleted")
                        .HasColumnType("integer");

                    b.Property<int>("DatasetsCountUpdated")
                        .HasColumnType("integer");

                    b.Property<byte[]>("EncryptedKey")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("bytea");

                    b.Property<List<Guid>>("EntitiesWithValidationErrors")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("FinishedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasValidationErrors")
                        .HasColumnType("boolean");

                    b.Property<int>("ImportRecordsCountTotal")
                        .HasColumnType("integer");

                    b.Property<string>("ImportStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImportType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsManualUpload")
                        .HasColumnType("boolean");

                    b.Property<int?>("MunicipalityId")
                        .HasColumnType("integer");

                    b.Property<string>("MunicipalityName")
                        .HasColumnType("text");

                    b.Property<string>("ProcessingErrors")
                        .HasColumnType("text");

                    b.Property<string>("QueuedFileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<int>>("RecordNumbersWithValidationErrors")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("RecordValidationErrors")
                        .HasColumnType("text");

                    b.Property<string>("SourceSystem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("TotalElapsedMilliseconds")
                        .HasColumnType("double precision");

                    b.Property<string>("WorkerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ImportStatistics");
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.IntegrityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bfs")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("SignatureHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("SignatureKeyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("SignatureVersion")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Integrities");
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.PersonDoiEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Canton")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DomainOfInfluenceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonDois");
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.PersonEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AliasName")
                        .HasColumnType("text");

                    b.Property<string>("AllianceName")
                        .HasColumnType("text");

                    b.Property<string>("CallName")
                        .HasColumnType("text");

                    b.Property<string>("ContactAddressDwellingNumber")
                        .HasColumnType("text");

                    b.Property<string>("ContactAddressExtensionLine1")
                        .HasColumnType("text");

                    b.Property<string>("ContactAddressExtensionLine2")
                        .HasColumnType("text");

                    b.Property<string>("ContactAddressHouseNumber")
                        .HasColumnType("text");

                    b.Property<string>("ContactAddressHouseNumberAddition")
                        .HasColumnType("text");

                    b.Property<string>("ContactAddressLine1")
                        .HasColumnType("text");

                    b.Property<string>("ContactAddressLine2")
                        .HasColumnType("text");

                    b.Property<string>("ContactAddressLine3")
                        .HasColumnType("text");

                    b.Property<string>("ContactAddressLine4")
                        .HasColumnType("text");

                    b.Property<string>("ContactAddressLine5")
                        .HasColumnType("text");

                    b.Property<string>("ContactAddressLine6")
                        .HasColumnType("text");

                    b.Property<string>("ContactAddressLine7")
                        .HasColumnType("text");

                    b.Property<string>("ContactAddressLocality")
                        .HasColumnType("text");

                    b.Property<string>("ContactAddressPostOfficeBoxText")
                        .HasColumnType("text");

                    b.Property<string>("ContactAddressStreet")
                        .HasColumnType("text");

                    b.Property<string>("ContactAddressTown")
                        .HasColumnType("text");

                    b.Property<string>("ContactAddressZipCode")
                        .HasColumnType("text");

                    b.Property<string>("ContactCantonAbbreviation")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("CountryNameShort")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<bool>("DateOfBirthAdjusted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DomainOfInfluenceId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ImportStatisticId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsLatest")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSwissAbroad")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<string>("LanguageOfCorrespondence")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("MoveInArrivalDate")
                        .HasColumnType("date");

                    b.Property<string>("MoveInCantonAbbreviation")
                        .HasColumnType("text");

                    b.Property<string>("MoveInComesFrom")
                        .HasColumnType("text");

                    b.Property<string>("MoveInCountryNameShort")
                        .HasColumnType("text");

                    b.Property<string>("MoveInMunicipalityName")
                        .HasColumnType("text");

                    b.Property<bool?>("MoveInUnknown")
                        .HasColumnType("boolean");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("integer");

                    b.Property<string>("MunicipalityName")
                        .HasColumnType("text");

                    b.Property<string>("OfficialName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OriginalName")
                        .HasColumnType("text");

                    b.Property<string>("OtherName")
                        .HasColumnType("text");

                    b.Property<Guid>("RegisterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResidenceAddressDwellingNumber")
                        .HasColumnType("text");

                    b.Property<string>("ResidenceAddressExtensionLine1")
                        .HasColumnType("text");

                    b.Property<string>("ResidenceAddressExtensionLine2")
                        .HasColumnType("text");

                    b.Property<string>("ResidenceAddressHouseNumber")
                        .HasColumnType("text");

                    b.Property<string>("ResidenceAddressPostOfficeBoxText")
                        .HasColumnType("text");

                    b.Property<string>("ResidenceAddressStreet")
                        .HasColumnType("text");

                    b.Property<string>("ResidenceAddressTown")
                        .HasColumnType("text");

                    b.Property<string>("ResidenceAddressZipCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResidenceCantonAbbreviation")
                        .HasColumnType("text");

                    b.Property<string>("ResidenceCountry")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("ResidenceEntryDate")
                        .HasColumnType("date");

                    b.Property<string>("ResidencePermit")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("ResidencePermitValidFrom")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ResidencePermitValidTill")
                        .HasColumnType("date");

                    b.Property<bool>("RestrictedVotingAndElectionRightFederation")
                        .HasColumnType("boolean");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("SignatureHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("SignatureKeyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("SignatureVersion")
                        .HasColumnType("smallint");

                    b.Property<string>("SourceSystemId")
                        .HasColumnType("text");

                    b.Property<bool?>("SwissAbroadEvotingFlag")
                        .HasColumnType("boolean");

                    b.Property<int>("TypeOfResidence")
                        .HasColumnType("integer");

                    b.Property<string>("ValidationErrors")
                        .HasColumnType("text");

                    b.Property<int>("VersionCount")
                        .HasColumnType("integer");

                    b.Property<long?>("Vn")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ImportStatisticId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.AccessControlListDoiEntity", b =>
                {
                    b.HasOne("Voting.Stimmregister.Domain.Models.ImportStatisticEntity", "ImportStatistic")
                        .WithMany("AccessControlListDois")
                        .HasForeignKey("ImportStatisticId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Voting.Stimmregister.Domain.Models.AccessControlListDoiEntity", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ImportStatistic");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.DomainOfInfluenceEntity", b =>
                {
                    b.HasOne("Voting.Stimmregister.Domain.Models.ImportStatisticEntity", "ImportStatistic")
                        .WithMany("DomainOfInfluences")
                        .HasForeignKey("ImportStatisticId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ImportStatistic");
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.EVoterAuditEntity", b =>
                {
                    b.OwnsOne("Voting.Stimmregister.Domain.Models.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<Guid>("EVoterAuditEntityId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("CreatedById")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("CreatedByName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime?>("ModifiedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("ModifiedById")
                                .HasColumnType("text");

                            b1.Property<string>("ModifiedByName")
                                .HasColumnType("text");

                            b1.HasKey("EVoterAuditEntityId");

                            b1.ToTable("EVoterAudits");

                            b1.WithOwner()
                                .HasForeignKey("EVoterAuditEntityId");
                        });

                    b.OwnsOne("Voting.Stimmregister.Domain.Models.AuditInfo", "EVoterAuditInfo", b1 =>
                        {
                            b1.Property<Guid>("EVoterAuditEntityId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("CreatedById")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("CreatedByName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime?>("ModifiedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("ModifiedById")
                                .HasColumnType("text");

                            b1.Property<string>("ModifiedByName")
                                .HasColumnType("text");

                            b1.HasKey("EVoterAuditEntityId");

                            b1.ToTable("EVoterAudits");

                            b1.WithOwner()
                                .HasForeignKey("EVoterAuditEntityId");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();

                    b.Navigation("EVoterAuditInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.EVoterEntity", b =>
                {
                    b.OwnsOne("Voting.Stimmregister.Domain.Models.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<Guid>("EVoterEntityId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("CreatedById")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("CreatedByName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime?>("ModifiedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("ModifiedById")
                                .HasColumnType("text");

                            b1.Property<string>("ModifiedByName")
                                .HasColumnType("text");

                            b1.HasKey("EVoterEntityId");

                            b1.ToTable("EVoters");

                            b1.WithOwner()
                                .HasForeignKey("EVoterEntityId");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.FilterCriteriaEntity", b =>
                {
                    b.HasOne("Voting.Stimmregister.Domain.Models.FilterEntity", "Filter")
                        .WithMany("FilterCriterias")
                        .HasForeignKey("FilterId");

                    b.HasOne("Voting.Stimmregister.Domain.Models.FilterVersionEntity", "FilterVersion")
                        .WithMany("FilterCriterias")
                        .HasForeignKey("FilterVersionId");

                    b.OwnsOne("Voting.Stimmregister.Domain.Models.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<Guid>("FilterCriteriaEntityId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("CreatedById")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("CreatedByName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime?>("ModifiedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("ModifiedById")
                                .HasColumnType("text");

                            b1.Property<string>("ModifiedByName")
                                .HasColumnType("text");

                            b1.HasKey("FilterCriteriaEntityId");

                            b1.ToTable("FilterCriteria");

                            b1.WithOwner()
                                .HasForeignKey("FilterCriteriaEntityId");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();

                    b.Navigation("Filter");

                    b.Navigation("FilterVersion");
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.FilterEntity", b =>
                {
                    b.OwnsOne("Voting.Stimmregister.Domain.Models.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<Guid>("FilterEntityId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("CreatedById")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("CreatedByName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime?>("ModifiedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("ModifiedById")
                                .HasColumnType("text");

                            b1.Property<string>("ModifiedByName")
                                .HasColumnType("text");

                            b1.HasKey("FilterEntityId");

                            b1.ToTable("Filters");

                            b1.WithOwner()
                                .HasForeignKey("FilterEntityId");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.FilterVersionEntity", b =>
                {
                    b.HasOne("Voting.Stimmregister.Domain.Models.FilterEntity", "Filter")
                        .WithMany("FilterVersions")
                        .HasForeignKey("FilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Stimmregister.Domain.Models.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<Guid>("FilterVersionEntityId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("CreatedById")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("CreatedByName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime?>("ModifiedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("ModifiedById")
                                .HasColumnType("text");

                            b1.Property<string>("ModifiedByName")
                                .HasColumnType("text");

                            b1.HasKey("FilterVersionEntityId");

                            b1.ToTable("FilterVersions");

                            b1.WithOwner()
                                .HasForeignKey("FilterVersionEntityId");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();

                    b.Navigation("Filter");
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.FilterVersionPersonEntity", b =>
                {
                    b.HasOne("Voting.Stimmregister.Domain.Models.FilterVersionEntity", "FilterVersion")
                        .WithMany("FilterVersionPersons")
                        .HasForeignKey("FilterVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voting.Stimmregister.Domain.Models.PersonEntity", "Person")
                        .WithMany("FilterVersionPersons")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Voting.Stimmregister.Domain.Models.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<Guid>("FilterVersionPersonEntityId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("CreatedById")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("CreatedByName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime?>("ModifiedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("ModifiedById")
                                .HasColumnType("text");

                            b1.Property<string>("ModifiedByName")
                                .HasColumnType("text");

                            b1.HasKey("FilterVersionPersonEntityId");

                            b1.ToTable("FilterVersionPersons");

                            b1.WithOwner()
                                .HasForeignKey("FilterVersionPersonEntityId");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();

                    b.Navigation("FilterVersion");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.ImportStatisticEntity", b =>
                {
                    b.OwnsOne("Voting.Stimmregister.Domain.Models.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<Guid>("ImportStatisticEntityId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("CreatedById")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("CreatedByName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime?>("ModifiedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("ModifiedById")
                                .HasColumnType("text");

                            b1.Property<string>("ModifiedByName")
                                .HasColumnType("text");

                            b1.HasKey("ImportStatisticEntityId");

                            b1.ToTable("ImportStatistics");

                            b1.WithOwner()
                                .HasForeignKey("ImportStatisticEntityId");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.IntegrityEntity", b =>
                {
                    b.OwnsOne("Voting.Stimmregister.Domain.Models.AuditInfo", "AuditInfo", b1 =>
                        {
                            b1.Property<Guid>("IntegrityEntityId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("CreatedById")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("CreatedByName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime?>("ModifiedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("ModifiedById")
                                .HasColumnType("text");

                            b1.Property<string>("ModifiedByName")
                                .HasColumnType("text");

                            b1.HasKey("IntegrityEntityId");

                            b1.ToTable("Integrities");

                            b1.WithOwner()
                                .HasForeignKey("IntegrityEntityId");
                        });

                    b.Navigation("AuditInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.PersonDoiEntity", b =>
                {
                    b.HasOne("Voting.Stimmregister.Domain.Models.PersonEntity", "Person")
                        .WithMany("PersonDois")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.PersonEntity", b =>
                {
                    b.HasOne("Voting.Stimmregister.Domain.Models.ImportStatisticEntity", "ImportStatistic")
                        .WithMany("Persons")
                        .HasForeignKey("ImportStatisticId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ImportStatistic");
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.AccessControlListDoiEntity", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.FilterEntity", b =>
                {
                    b.Navigation("FilterCriterias");

                    b.Navigation("FilterVersions");
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.FilterVersionEntity", b =>
                {
                    b.Navigation("FilterCriterias");

                    b.Navigation("FilterVersionPersons");
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.ImportStatisticEntity", b =>
                {
                    b.Navigation("AccessControlListDois");

                    b.Navigation("DomainOfInfluences");

                    b.Navigation("Persons");
                });

            modelBuilder.Entity("Voting.Stimmregister.Domain.Models.PersonEntity", b =>
                {
                    b.Navigation("FilterVersionPersons");

                    b.Navigation("PersonDois");
                });
#pragma warning restore 612, 618
        }
    }
}
